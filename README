README

Watercooler is a web application that provides realtime group chat,
built with Python and the Django web programming framework.  This
document aims to be a high-level overview of its structure and
functionality.

Introduction
----------------------------------------------------------------------

Watercooler is a Django project, which means the source code follows
the same basic patterns as other Django projects.  At a basic level,
Django projects are defined by the following elements:

 * settings.py, which defines the settings for the project

 * models.py, which defines the data models used by the project in
   terms of Django's object-relational mapper (ORM)

 * urls.py, which defines the URL structure of the project, mapping
   URLs to view functions

 * views.py, which contains the view functions to which URLs are
   mapped by urls.py

Additionally, most Django projects will also have the following:

 * a templates directory, which contains the templates used by the
   view functions to generate output

 * admin.py, which sets up Django's built-in administrative interface
   for a project's particular data models (as defined in models.py)

 * a media directory, which contains the static media (ie, CSS,
   JavaScript, images, etc.) used by the project.  These are generally
   not served by Django itself, but are instead served by another web
   server better suited for that task (eg, Apache, nginx, etc.).

A note about the concepts of projects vs. applications in Django: When
you read about Django, you will see that, generally speaking, a single
Django "project" is composed of one or more Django "applications"
(which can be shared between projects, ideally).  Watercooler, because
of its simplicity, is a single project and application (in the Django
sense) in one.


Overview of directory structure
----------------------------------------------------------------------

__init__.py

        Simply marks a directory as a Python module

admin.py

        Sets up the built-in Django admin application for the
        Watercooler data models.

manage.py

        Generated automatically by Django when creating a new project.
        Provides commands for interacting with the database, running
        tests, etc.  You can ignore this.

media/

        Where static media (CSS, JavaScript, images) are stored.  This
        content is generally served by a separate web server (because
        Django shouldn't be serving static content).  In this case,
        this content is served from
        http://static.overloaded.org/watercooler/.

settings/

        This is a Python module (usually for Django this is just
        settings.py rather than being broken into different pieces).
        It is broken into different pieces to allow for easily
        managing different settings on different machines (ie,
        development and deployment settings are separated by
        hostname).

templates/

        Where the Django templates are stored.

templates/base.html

        The primary template from which all of the others inherit
        ("extend" in Django's parlance).

urls.py

        Where the URL structure of the application is defined.  Each
        URL pattern is mapped to a particular view function, which
        handles the server-side logic and returns the actual page
        content (usually generated by the templates).

        Some of the URLs are given names, which is useful for
        dynamically generating those URLs in view functions and
        templates (instead of hard-coding those URLs in the source).

views.py

        Where the view functions are defined. These are mapped to URLs
        in the urls.py file.
