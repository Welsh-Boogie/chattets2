README

Watercooler is a web application that provides realtime group chat,
built with Python and the Django web programming framework.  This
document aims to be a high-level overview of its structure and
functionality.

Overview of directory structure
----------------------------------------------------------------------

__init__.py

        Simply marks a directory as a Python module

admin.py

        Sets up the built-in Django admin application for the
        Watercooler data models.

manage.py

        Generated automatically by Django when creating a new project.
        Provides commands for interacting with the database, running
        tests, etc.  You can ignore this.

media/

        Where static media (CSS, JavaScript, images) are stored.  This
        content is generally served by a separate web server (because
        Django shouldn't be serving static content).  In this case,
        this content is served from
        http://static.overloaded.org/watercooler/.

settings/

        This is a Python module (usually for Django this is just
        settings.py rather than being broken into different pieces).
        It is broken into different pieces to allow for easily
        managing different settings on different machines (ie,
        development and deployment settings are separated by
        hostname).

templates/

        Where the Django templates are stored.

templates/base.html

        The primary template from which all of the others inherit
        ("extend" in Django's parlance).

urls.py

        Where the URL structure of the application is defined.  Each
        URL pattern is mapped to a particular view function, which
        handles the server-side logic and returns the actual page
        content (usually generated by the templates).

        Some of the URLs are given names, which is useful for
        dynamically generating those URLs in view functions and
        templates (instead of hard-coding those URLs in the source).

views.py

        Where the view functions are defined. These are mapped to URLs
        in the urls.py file.
